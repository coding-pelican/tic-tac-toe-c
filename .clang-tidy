############ Global ############
################################
---
Checks: >
  -*,
  bugprone-argument-comment,
  bugprone-assert-side-effect,
  bugprone-assignment-in-if-condition,
  bugprone-bad-signal-to-kill-thread,
  bugprone-bool-pointer-implicit-conversion,
  bugprone-branch-clone,
  bugprone-copy-constructor-init,
  bugprone-dangling-handle,
  bugprone-dynamic-static-initializers,
  -bugprone-easily-swappable-parameters,
  bugprone-empty-catch,
  bugprone-exception-escape,
  bugprone-fold-init-type,
  bugprone-forward-declaration-namespace,
  bugprone-forwarding-reference-overload,
  bugprone-implicit-widening-of-multiplication-result,
  bugprone-inaccurate-erase,
  bugprone-incorrect-roundings,
  bugprone-infinite-loop,
  bugprone-integer-division,
  bugprone-lambda-function-name,
  bugprone-macro-parentheses,
  bugprone-macro-repeated-side-effects,
  bugprone-misplaced-operator-in-strlen-in-alloc,
  bugprone-misplaced-pointer-arithmetic-in-alloc,
  bugprone-misplaced-widening-cast,
  bugprone-move-forwarding-reference,
  bugprone-multiple-new-in-one-expression,
  bugprone-multiple-statement-macro,
  bugprone-narrowing-conversions,
  bugprone-no-escape,
  bugprone-non-zero-enum-to-bool-conversion,
  bugprone-not-null-terminated-result,
  bugprone-parent-virtual-call,
  bugprone-posix-return,
  bugprone-redundant-branch-condition,
  -bugprone-reserved-identifier,
  bugprone-shared-ptr-array-mismatch,
  bugprone-signal-handler,
  bugprone-signed-char-misuse,
  bugprone-sizeof-container,
  bugprone-sizeof-expression,
  bugprone-spuriously-wake-up-functions,
  bugprone-standalone-empty,
  bugprone-string-constructor,
  bugprone-string-integer-assignment,
  bugprone-string-literal-with-embedded-nul,
  bugprone-stringview-nullptr,
  bugprone-suspicious-enum-usage,
  bugprone-suspicious-include,
  bugprone-suspicious-memory-comparison,
  bugprone-suspicious-memset-usage,
  bugprone-suspicious-missing-comma,
  bugprone-suspicious-realloc-usage,
  bugprone-suspicious-semicolon,
  bugprone-suspicious-string-compare,
  bugprone-swapped-arguments,
  bugprone-switch-missing-default-case,
  bugprone-terminating-continue,
  bugprone-throw-keyword-missing,
  bugprone-too-small-loop-variable,
  bugprone-unchecked-optional-access,
  bugprone-undefined-memory-manipulation,
  bugprone-undelegated-constructor,
  bugprone-unhandled-exception-at-new,
  bugprone-unhandled-self-assignment,
  bugprone-unique-ptr-array-mismatch,
  bugprone-unsafe-functions,
  bugprone-unused-raii,
  bugprone-unused-return-value,
  bugprone-use-after-move,
  bugprone-virtual-near-miss,
  cert-con36-c,
  cert-con54-cpp,
  cert-dcl03-c,
  cert-dcl16-c,
  cert-dcl21-cpp,
  -cert-dcl37-c,
  cert-dcl50-cpp,
  -cert-dcl51-cpp,
  cert-dcl54-cpp,
  cert-dcl58-cpp,
  cert-dcl59-cpp,
  cert-env33-c,
  cert-err09-cpp,
  cert-err33-c,
  -cert-err34-c,
  cert-err52-cpp,
  cert-err58-cpp,
  cert-err60-cpp,
  cert-err61-cpp,
  cert-exp42-c,
  cert-fio38-c,
  cert-flp30-c,
  cert-flp37-c,
  cert-mem57-cpp,
  cert-msc24-c,
  -cert-msc30-c,
  cert-msc32-c,
  cert-msc33-c,
  -cert-msc50-cpp,
  cert-msc51-cpp,
  cert-msc54-cpp,
  cert-oop11-cpp,
  cert-oop54-cpp,
  cert-oop57-cpp,
  cert-oop58-cpp,
  cert-pos44-c,
  cert-pos47-c,
  cert-sig30-c,
  cert-str34-c,
  clang-analyzer-apiModeling.Errno,
  clang-analyzer-apiModeling.TrustNonnull,
  clang-analyzer-apiModeling.TrustReturnsNonnull,
  clang-analyzer-apiModeling.google.GTest,
  clang-analyzer-apiModeling.llvm.CastValue,
  clang-analyzer-apiModeling.llvm.ReturnValue,
  clang-analyzer-core.CallAndMessage,
  clang-analyzer-core.CallAndMessageModeling,
  clang-analyzer-core.DivideZero,
  clang-analyzer-core.DynamicTypePropagation,
  clang-analyzer-core.NonNullParamChecker,
  clang-analyzer-core.NonnilStringConstants,
  clang-analyzer-core.NullDereference,
  clang-analyzer-core.StackAddrEscapeBase,
  clang-analyzer-core.StackAddressEscape,
  clang-analyzer-core.UndefinedBinaryOperatorResult,
  clang-analyzer-core.VLASize,
  clang-analyzer-core.builtin.BuiltinFunctions,
  clang-analyzer-core.builtin.NoReturnFunctions,
  clang-analyzer-core.uninitialized.ArraySubscript,
  clang-analyzer-core.uninitialized.Assign,
  clang-analyzer-core.uninitialized.Branch,
  clang-analyzer-core.uninitialized.CapturedBlockVariable,
  clang-analyzer-core.uninitialized.NewArraySize,
  clang-analyzer-core.uninitialized.UndefReturn,
  clang-analyzer-cplusplus.InnerPointer,
  clang-analyzer-cplusplus.Move,
  clang-analyzer-cplusplus.NewDelete,
  clang-analyzer-cplusplus.NewDeleteLeaks,
  clang-analyzer-cplusplus.PlacementNew,
  clang-analyzer-cplusplus.PureVirtualCall,
  clang-analyzer-cplusplus.SelfAssignment,
  clang-analyzer-cplusplus.SmartPtrModeling,
  clang-analyzer-cplusplus.StringChecker,
  clang-analyzer-cplusplus.VirtualCallModeling,
  clang-analyzer-deadcode.DeadStores,
  clang-analyzer-fuchsia.HandleChecker,
  clang-analyzer-nullability.NullPassedToNonnull,
  clang-analyzer-nullability.NullReturnedFromNonnull,
  clang-analyzer-nullability.NullabilityBase,
  clang-analyzer-nullability.NullableDereferenced,
  clang-analyzer-nullability.NullablePassedToNonnull,
  clang-analyzer-nullability.NullableReturnedFromNonnull,
  clang-analyzer-optin.cplusplus.UninitializedObject,
  clang-analyzer-optin.cplusplus.VirtualCall,
  clang-analyzer-optin.mpi.MPI-Checker,
  clang-analyzer-optin.osx.OSObjectCStyleCast,
  clang-analyzer-optin.osx.cocoa.localizability.,EmptyLocalizationContextChecker,
  clang-analyzer-optin.osx.cocoa.localizability.,NonLocalizedStringChecker,
  clang-analyzer-optin.performance.GCDAntipattern,
  clang-analyzer-optin.performance.Padding,
  clang-analyzer-optin.portability.UnixAPI,
  clang-analyzer-osx.API,
  clang-analyzer-osx.MIG,
  clang-analyzer-osx.NSOrCFErrorDerefChecker,
  clang-analyzer-osx.NumberObjectConversion,
  clang-analyzer-osx.OSObjectRetainCount,
  clang-analyzer-osx.ObjCProperty,
  clang-analyzer-osx.SecKeychainAPI,
  clang-analyzer-osx.cocoa.AtSync,
  clang-analyzer-osx.cocoa.AutoreleaseWrite,
  clang-analyzer-osx.cocoa.ClassRelease,
  clang-analyzer-osx.cocoa.Dealloc,
  clang-analyzer-osx.cocoa.IncompatibleMethodTypes,
  clang-analyzer-osx.cocoa.Loops,
  clang-analyzer-osx.cocoa.MissingSuperCall,
  clang-analyzer-osx.cocoa.NSAutoreleasePool,
  clang-analyzer-osx.cocoa.NSError,
  clang-analyzer-osx.cocoa.NilArg,
  clang-analyzer-osx.cocoa.NonNilReturnValue,
  clang-analyzer-osx.cocoa.ObjCGenerics,
  clang-analyzer-osx.cocoa.RetainCount,
  clang-analyzer-osx.cocoa.RetainCountBase,
  clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak,
  clang-analyzer-osx.cocoa.SelfInit,
  clang-analyzer-osx.cocoa.SuperDealloc,
  clang-analyzer-osx.cocoa.UnusedIvars,
  clang-analyzer-osx.cocoa.VariadicMethodTypes,
  clang-analyzer-osx.coreFoundation.CFError,
  clang-analyzer-osx.coreFoundation.CFNumber,
  clang-analyzer-osx.coreFoundation.CFRetainRelease,
  clang-analyzer-osx.coreFoundation.containers.OutOfBounds,
  clang-analyzer-osx.coreFoundation.containers.,PointerSizedValues,
  clang-analyzer-security.FloatLoopCounter,
  clang-analyzer-security.insecureAPI.,DeprecatedOrUnsafeBufferHandling,
  clang-analyzer-security.insecureAPI.SecuritySyntaxChecker,
  clang-analyzer-security.insecureAPI.UncheckedReturn,
  clang-analyzer-security.insecureAPI.bcmp,
  clang-analyzer-security.insecureAPI.bcopy,
  clang-analyzer-security.insecureAPI.bzero,
  clang-analyzer-security.insecureAPI.decodeValueOfObjCType,
  clang-analyzer-security.insecureAPI.getpw,
  clang-analyzer-security.insecureAPI.gets,
  clang-analyzer-security.insecureAPI.mkstemp,
  clang-analyzer-security.insecureAPI.mktemp,
  clang-analyzer-security.insecureAPI.rand,
  clang-analyzer-security.insecureAPI.strcpy,
  clang-analyzer-security.insecureAPI.vfork,
  clang-analyzer-unix.API,
  clang-analyzer-unix.DynamicMemoryModeling,
  clang-analyzer-unix.Malloc,
  clang-analyzer-unix.MallocSizeof,
  clang-analyzer-unix.MismatchedDeallocator,
  clang-analyzer-unix.Vfork,
  clang-analyzer-unix.cstring.BadSizeArg,
  clang-analyzer-unix.cstring.CStringModeling,
  clang-analyzer-unix.cstring.NullArg,
  clang-analyzer-valist.CopyToSelf,
  clang-analyzer-valist.Uninitialized,
  clang-analyzer-valist.Unterminated,
  clang-analyzer-valist.ValistBase,
  clang-analyzer-webkit.NoUncountedMemberChecker,
  clang-analyzer-webkit.RefCntblBaseVirtualDtor,
  clang-analyzer-webkit.UncountedLambdaCapturesChecker,
  cppcoreguidelines-avoid-c-arrays,
  cppcoreguidelines-avoid-capturing-lambda-coroutines,
  cppcoreguidelines-avoid-const-or-ref-data-members,
  cppcoreguidelines-avoid-do-while,
  cppcoreguidelines-avoid-goto,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-avoid-non-const-global-variables,
  cppcoreguidelines-avoid-reference-coroutine-parameters,
  cppcoreguidelines-c-copy-assignment-signature,
  cppcoreguidelines-explicit-virtual-functions,
  cppcoreguidelines-init-variables,
  cppcoreguidelines-interfaces-global-init,
  cppcoreguidelines-macro-usage,
  cppcoreguidelines-misleading-capture-default-by-value,
  cppcoreguidelines-missing-std-forward,
  cppcoreguidelines-narrowing-conversions,
  cppcoreguidelines-no-malloc,
  cppcoreguidelines-noexcept-destructor,
  cppcoreguidelines-noexcept-move-operations,
  cppcoreguidelines-noexcept-swap,
  cppcoreguidelines-non-private-member-variables-in-classes,
  cppcoreguidelines-owning-memory,
  cppcoreguidelines-prefer-member-initializer,
  cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  cppcoreguidelines-pro-bounds-constant-array-index,
  cppcoreguidelines-pro-bounds-pointer-arithmetic,
  cppcoreguidelines-pro-type-const-cast,
  cppcoreguidelines-pro-type-cstyle-cast,
  cppcoreguidelines-pro-type-member-init,
  cppcoreguidelines-pro-type-reinterpret-cast,
  cppcoreguidelines-pro-type-static-cast-downcast,
  cppcoreguidelines-pro-type-union-access,
  cppcoreguidelines-pro-type-vararg,
  cppcoreguidelines-rvalue-reference-param-not-moved,
  cppcoreguidelines-slicing,
  cppcoreguidelines-special-member-functions,
  cppcoreguidelines-use-default-member-init,
  cppcoreguidelines-virtual-class-destructor,
  hicpp-avoid-c-arrays,
  hicpp-avoid-goto,
  hicpp-braces-around-statements,
  hicpp-deprecated-headers,
  hicpp-exception-baseclass,
  hicpp-explicit-conversions,
  hicpp-function-size,
  hicpp-invalid-access-moved,
  hicpp-member-init,
  hicpp-move-const-arg,
  hicpp-multiway-paths-covered,
  hicpp-named-parameter,
  hicpp-new-delete-operators,
  hicpp-no-array-decay,
  hicpp-no-assembler,
  hicpp-no-malloc,
  hicpp-noexcept-move,
  hicpp-signed-bitwise,
  hicpp-special-member-functions,
  hicpp-static-assert,
  hicpp-undelegated-constructor,
  -hicpp-uppercase-literal-suffix,
  hicpp-use-auto,
  hicpp-use-emplace,
  hicpp-use-equals-default,
  hicpp-use-equals-delete,
  hicpp-use-noexcept,
  hicpp-use-nullptr,
  hicpp-use-override,
  hicpp-vararg,
  misc-confusable-identifiers,
  misc-const-correctness,
  misc-definitions-in-headers,
  misc-header-include-cycle,
  misc-include-cleaner,
  misc-misleading-bidirectional,
  misc-misleading-identifier,
  -misc-misplaced-const,
  misc-new-delete-overloads,
  misc-no-recursion,
  misc-non-copyable-objects,
  -misc-non-private-member-variables-in-classes,
  misc-redundant-expression,
  misc-static-assert,
  misc-throw-by-value-catch-by-reference,
  misc-unconventional-assign-operator,
  misc-uniqueptr-reset-release,
  misc-unused-alias-decls,
  misc-unused-parameters,
  misc-unused-using-decls,
  misc-use-anonymous-namespace,
  performance-avoid-endl,
  performance-faster-string-find,
  performance-for-range-copy,
  performance-implicit-conversion-in-loop,
  performance-inefficient-algorithm,
  performance-inefficient-string-concatenation,
  performance-inefficient-vector-operation,
  performance-move-const-arg,
  performance-move-constructor-init,
  performance-no-automatic-move,
  performance-no-int-to-ptr,
  performance-noexcept-destructor,
  performance-noexcept-move-constructor,
  performance-noexcept-swap,
  performance-trivially-destructible,
  performance-type-promotion-in-math-fn,
  performance-unnecessary-copy-initialization,
  performance-unnecessary-value-param,
  portability-restrict-system-includes,
  portability-simd-intrinsics,
  portability-std-allocator-const,
  -readability-avoid-const-params-in-decls,
  readability-avoid-unconditional-preprocessor-if,
  -readability-braces-around-statements,
  readability-const-return-type,
  readability-container-contains,
  readability-container-data-pointer,
  readability-container-size-empty,
  readability-convert-member-functions-to-static,
  readability-delete-null-pointer,
  readability-duplicate-include,
  readability-else-after-return,
  readability-function-cognitive-complexity,
  readability-function-size,
  -readability-identifier-length,
  readability-identifier-naming,
  readability-implicit-bool-conversion,
  readability-inconsistent-declaration-parameter-name,
  readability-isolate-declaration,
  -readability-magic-numbers,
  readability-make-member-function-const,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  -readability-named-parameter,
  readability-non-const-parameter,
  readability-operators-representation,
  readability-qualified-auto,
  readability-redundant-access-specifiers,
  readability-redundant-control-flow,
  readability-redundant-declaration,
  readability-redundant-function-ptr-dereference,
  readability-redundant-member-init,
  readability-redundant-preprocessor,
  readability-redundant-smartptr-get,
  readability-redundant-string-cstr,
  readability-redundant-string-init,
  readability-simplify-boolean-expr,
  readability-simplify-subscript-expr,
  readability-static-accessed-through-instance,
  readability-static-definition-in-anonymous-namespace,
  readability-string-compare,
  readability-suspicious-call-argument,
  readability-uniqueptr-delete-release,
  -readability-uppercase-literal-suffix,
  readability-use-anyofallof

# Can spot potential performance issues or side effects from destructor calls.
# AnalyzeTemporaryDtors: true

# Turn all the warnings from the checks above into errors.
WarningsAsErrors: "*"

CheckOptions:
  - { key: readability-braces-around-statements.ShortStatementLines, value: "0" }
  - { key: readability-function-cognitive-complexity.Threshold, value: "64" }
  - { key: readability-function-size.BranchThreshold, value: "4294967295" }
  - { key: readability-function-size.LineThreshold, value: "4294967295" }
  - { key: readability-function-size.StatementThreshold, value: "800" }
  # - { key: readability-identifier-naming.NamespaceCase, value: lower_case }
  # - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  # - { key: readability-identifier-naming.StructCase, value: CamelCase }
  # - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase }
  # - { key: readability-identifier-naming.FunctionCase, value: CamelCase }
  # - { key: readability-identifier-naming.VariableCase, value: camelBack }
  # - { key: readability-identifier-naming.PrivateMemberSuffix, value: _ }
  # - { key: readability-identifier-naming.ProtectedMemberSuffix, value: _ }
  # - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }
  # - { key: readability-identifier-naming.EnumConstantCase, value: CamelCase }
  # - { key: readability-identifier-naming.EnumConstantPrefix, value: e }
  # - { key: readability-identifier-naming.ConstexprVariableCase, value: CamelCase }
  # - { key: readability-identifier-naming.ConstexprVariablePrefix, value: k }
  # - { key: readability-identifier-naming.GlobalConstantCase, value: CamelCase }
  # - { key: readability-identifier-naming.GlobalConstantPrefix, value: k }
  # - { key: readability-identifier-naming.MemberConstantCase, value: CamelCase }
  # - { key: readability-identifier-naming.MemberConstantPrefix, value: k }
  # - { key: readability-identifier-naming.StaticConstantCase, value: CamelCase }
  # - { key: readability-identifier-naming.StaticConstantPrefix, value: k }
# end 'Configure clang-tidy'

################################
##### Configure clang-tidy #####
################################
# Checks: >
#   -*,                  # 기본 체크
#   # altera-*,            # OpenCL programming for FPGAs 준수
#   # android-*,           # Android 버그 잡이
#   # boost-*,             # Boost library 버그 잡이
#   bugprone-*,          # static 버그 잡이 1
#   cert-*,              # CERT Secure Coding Guidelines 준수
#   clang-analyzer-*,    # static 버그 잡이 2
#   # concurrency-*,       # concurrent programming (including threads, fibers, coroutines, etc.) 버그 잡이
#   cppcoreguidelines-*, # C++ Core Guideline 준수
#   # google-*,            # Google coding conventions 준수
#   hicpp-*,             # High Integrity C++ Coding Standard 준수
#   # linuxkernel-*,       # Linux Kernel coding conventions 준수
#   # llvm-*,              # LLVM coding conventions 준수
#   # llvmlibc-*,          # LLVM-libc coding standards 준수
#   misc-*,              # 더 나은 대안 제안
#   # modernize-*,         # Modern(C++11) 언어 구조 사용
#   # openmp-*,            # OpenMP API 준수
#   performance-*,       # 성능 향상 제안
#   portability-*,       # 이식성 제안
#   readability-*        # 가독성 제안

################################
######## Enabled checks ########
################################
# clang-tidy -checks=* -list-checks
# Enabled checks:
#   abseil-cleanup-ctad
#   abseil-duration-addition
#   abseil-duration-comparison
#   abseil-duration-conversion-cast
#   abseil-duration-division
#   abseil-duration-factory-float
#   abseil-duration-factory-scale
#   abseil-duration-subtraction
#   abseil-duration-unnecessary-conversion
#   abseil-faster-strsplit-delimiter
#   abseil-no-internal-dependencies
#   abseil-no-namespace
#   abseil-redundant-strcat-calls
#   abseil-str-cat-append
#   abseil-string-find-startswith
#   abseil-string-find-str-contains
#   abseil-time-comparison
#   abseil-time-subtraction
#   abseil-upgrade-duration-conversions
#   altera-id-dependent-backward-branch
#   altera-kernel-name-restriction
#   altera-single-work-item-barrier
#   altera-struct-pack-align
#   altera-unroll-loops
#   android-cloexec-accept
#   android-cloexec-accept4
#   android-cloexec-creat
#   android-cloexec-dup
#   android-cloexec-epoll-create
#   android-cloexec-epoll-create1
#   android-cloexec-fopen
#   android-cloexec-inotify-init
#   android-cloexec-inotify-init1
#   android-cloexec-memfd-create
#   android-cloexec-open
#   android-cloexec-pipe
#   android-cloexec-pipe2
#   android-cloexec-socket
#   android-comparison-in-temp-failure-retry
#   boost-use-to-string
#   bugprone-argument-comment
#   bugprone-assert-side-effect
#   bugprone-assignment-in-if-condition
#   bugprone-bad-signal-to-kill-thread
#   bugprone-bool-pointer-implicit-conversion
#   bugprone-branch-clone
#   bugprone-copy-constructor-init
#   bugprone-dangling-handle
#   bugprone-dynamic-static-initializers
#   bugprone-easily-swappable-parameters
#   bugprone-empty-catch
#   bugprone-exception-escape
#   bugprone-fold-init-type
#   bugprone-forward-declaration-namespace
#   bugprone-forwarding-reference-overload
#   bugprone-implicit-widening-of-multiplication-result
#   bugprone-inaccurate-erase
#   bugprone-incorrect-roundings
#   bugprone-infinite-loop
#   bugprone-integer-division
#   bugprone-lambda-function-name
#   bugprone-macro-parentheses
#   bugprone-macro-repeated-side-effects
#   bugprone-misplaced-operator-in-strlen-in-alloc
#   bugprone-misplaced-pointer-arithmetic-in-alloc
#   bugprone-misplaced-widening-cast
#   bugprone-move-forwarding-reference
#   bugprone-multiple-new-in-one-expression
#   bugprone-multiple-statement-macro
#   bugprone-narrowing-conversions
#   bugprone-no-escape
#   bugprone-non-zero-enum-to-bool-conversion
#   bugprone-not-null-terminated-result
#   bugprone-parent-virtual-call
#   bugprone-posix-return
#   bugprone-redundant-branch-condition
#   bugprone-reserved-identifier
#   bugprone-shared-ptr-array-mismatch
#   bugprone-signal-handler
#   bugprone-signed-char-misuse
#   bugprone-sizeof-container
#   bugprone-sizeof-expression
#   bugprone-spuriously-wake-up-functions
#   bugprone-standalone-empty
#   bugprone-string-constructor
#   bugprone-string-integer-assignment
#   bugprone-string-literal-with-embedded-nul
#   bugprone-stringview-nullptr
#   bugprone-suspicious-enum-usage
#   bugprone-suspicious-include
#   bugprone-suspicious-memory-comparison
#   bugprone-suspicious-memset-usage
#   bugprone-suspicious-missing-comma
#   bugprone-suspicious-realloc-usage
#   bugprone-suspicious-semicolon
#   bugprone-suspicious-string-compare
#   bugprone-swapped-arguments
#   bugprone-switch-missing-default-case
#   bugprone-terminating-continue
#   bugprone-throw-keyword-missing
#   bugprone-too-small-loop-variable
#   bugprone-unchecked-optional-access
#   bugprone-undefined-memory-manipulation
#   bugprone-undelegated-constructor
#   bugprone-unhandled-exception-at-new
#   bugprone-unhandled-self-assignment
#   bugprone-unique-ptr-array-mismatch
#   bugprone-unsafe-functions
#   bugprone-unused-raii
#   bugprone-unused-return-value
#   bugprone-use-after-move
#   bugprone-virtual-near-miss
#   cert-con36-c
#   cert-con54-cpp
#   cert-dcl03-c
#   cert-dcl16-c
#   cert-dcl21-cpp
#   cert-dcl37-c
#   cert-dcl50-cpp
#   cert-dcl51-cpp
#   cert-dcl54-cpp
#   cert-dcl58-cpp
#   cert-dcl59-cpp
#   cert-env33-c
#   cert-err09-cpp
#   cert-err33-c
#   cert-err34-c
#   cert-err52-cpp
#   cert-err58-cpp
#   cert-err60-cpp
#   cert-err61-cpp
#   cert-exp42-c
#   cert-fio38-c
#   cert-flp30-c
#   cert-flp37-c
#   cert-mem57-cpp
#   cert-msc24-c
#   cert-msc30-c
#   cert-msc32-c
#   cert-msc33-c
#   cert-msc50-cpp
#   cert-msc51-cpp
#   cert-msc54-cpp
#   cert-oop11-cpp
#   cert-oop54-cpp
#   cert-oop57-cpp
#   cert-oop58-cpp
#   cert-pos44-c
#   cert-pos47-c
#   cert-sig30-c
#   cert-str34-c
#   clang-analyzer-apiModeling.Errno
#   clang-analyzer-apiModeling.TrustNonnull
#   clang-analyzer-apiModeling.TrustReturnsNonnull
#   clang-analyzer-apiModeling.google.GTest
#   clang-analyzer-apiModeling.llvm.CastValue
#   clang-analyzer-apiModeling.llvm.ReturnValue
#   clang-analyzer-core.CallAndMessage
#   clang-analyzer-core.CallAndMessageModeling
#   clang-analyzer-core.DivideZero
#   clang-analyzer-core.DynamicTypePropagation
#   clang-analyzer-core.NonNullParamChecker
#   clang-analyzer-core.NonnilStringConstants
#   clang-analyzer-core.NullDereference
#   clang-analyzer-core.StackAddrEscapeBase
#   clang-analyzer-core.StackAddressEscape
#   clang-analyzer-core.UndefinedBinaryOperatorResult
#   clang-analyzer-core.VLASize
#   clang-analyzer-core.builtin.BuiltinFunctions
#   clang-analyzer-core.builtin.NoReturnFunctions
#   clang-analyzer-core.uninitialized.ArraySubscript
#   clang-analyzer-core.uninitialized.Assign
#   clang-analyzer-core.uninitialized.Branch
#   clang-analyzer-core.uninitialized.CapturedBlockVariable
#   clang-analyzer-core.uninitialized.NewArraySize
#   clang-analyzer-core.uninitialized.UndefReturn
#   clang-analyzer-cplusplus.InnerPointer
#   clang-analyzer-cplusplus.Move
#   clang-analyzer-cplusplus.NewDelete
#   clang-analyzer-cplusplus.NewDeleteLeaks
#   clang-analyzer-cplusplus.PlacementNew
#   clang-analyzer-cplusplus.PureVirtualCall
#   clang-analyzer-cplusplus.SelfAssignment
#   clang-analyzer-cplusplus.SmartPtrModeling
#   clang-analyzer-cplusplus.StringChecker
#   clang-analyzer-cplusplus.VirtualCallModeling
#   clang-analyzer-deadcode.DeadStores
#   clang-analyzer-fuchsia.HandleChecker
#   clang-analyzer-nullability.NullPassedToNonnull
#   clang-analyzer-nullability.NullReturnedFromNonnull
#   clang-analyzer-nullability.NullabilityBase
#   clang-analyzer-nullability.NullableDereferenced
#   clang-analyzer-nullability.NullablePassedToNonnull
#   clang-analyzer-nullability.NullableReturnedFromNonnull
#   clang-analyzer-optin.cplusplus.UninitializedObject
#   clang-analyzer-optin.cplusplus.VirtualCall
#   clang-analyzer-optin.mpi.MPI-Checker
#   clang-analyzer-optin.osx.OSObjectCStyleCast
#   clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
#   clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
#   clang-analyzer-optin.performance.GCDAntipattern
#   clang-analyzer-optin.performance.Padding
#   clang-analyzer-optin.portability.UnixAPI
#   clang-analyzer-osx.API
#   clang-analyzer-osx.MIG
#   clang-analyzer-osx.NSOrCFErrorDerefChecker
#   clang-analyzer-osx.NumberObjectConversion
#   clang-analyzer-osx.OSObjectRetainCount
#   clang-analyzer-osx.ObjCProperty
#   clang-analyzer-osx.SecKeychainAPI
#   clang-analyzer-osx.cocoa.AtSync
#   clang-analyzer-osx.cocoa.AutoreleaseWrite
#   clang-analyzer-osx.cocoa.ClassRelease
#   clang-analyzer-osx.cocoa.Dealloc
#   clang-analyzer-osx.cocoa.IncompatibleMethodTypes
#   clang-analyzer-osx.cocoa.Loops
#   clang-analyzer-osx.cocoa.MissingSuperCall
#   clang-analyzer-osx.cocoa.NSAutoreleasePool
#   clang-analyzer-osx.cocoa.NSError
#   clang-analyzer-osx.cocoa.NilArg
#   clang-analyzer-osx.cocoa.NonNilReturnValue
#   clang-analyzer-osx.cocoa.ObjCGenerics
#   clang-analyzer-osx.cocoa.RetainCount
#   clang-analyzer-osx.cocoa.RetainCountBase
#   clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
#   clang-analyzer-osx.cocoa.SelfInit
#   clang-analyzer-osx.cocoa.SuperDealloc
#   clang-analyzer-osx.cocoa.UnusedIvars
#   clang-analyzer-osx.cocoa.VariadicMethodTypes
#   clang-analyzer-osx.coreFoundation.CFError
#   clang-analyzer-osx.coreFoundation.CFNumber
#   clang-analyzer-osx.coreFoundation.CFRetainRelease
#   clang-analyzer-osx.coreFoundation.containers.OutOfBounds
#   clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
#   clang-analyzer-security.FloatLoopCounter
#   clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
#   clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
#   clang-analyzer-security.insecureAPI.UncheckedReturn
#   clang-analyzer-security.insecureAPI.bcmp
#   clang-analyzer-security.insecureAPI.bcopy
#   clang-analyzer-security.insecureAPI.bzero
#   clang-analyzer-security.insecureAPI.decodeValueOfObjCType
#   clang-analyzer-security.insecureAPI.getpw
#   clang-analyzer-security.insecureAPI.gets
#   clang-analyzer-security.insecureAPI.mkstemp
#   clang-analyzer-security.insecureAPI.mktemp
#   clang-analyzer-security.insecureAPI.rand
#   clang-analyzer-security.insecureAPI.strcpy
#   clang-analyzer-security.insecureAPI.vfork
#   clang-analyzer-unix.API
#   clang-analyzer-unix.DynamicMemoryModeling
#   clang-analyzer-unix.Malloc
#   clang-analyzer-unix.MallocSizeof
#   clang-analyzer-unix.MismatchedDeallocator
#   clang-analyzer-unix.Vfork
#   clang-analyzer-unix.cstring.BadSizeArg
#   clang-analyzer-unix.cstring.CStringModeling
#   clang-analyzer-unix.cstring.NullArg
#   clang-analyzer-valist.CopyToSelf
#   clang-analyzer-valist.Uninitialized
#   clang-analyzer-valist.Unterminated
#   clang-analyzer-valist.ValistBase
#   clang-analyzer-webkit.NoUncountedMemberChecker
#   clang-analyzer-webkit.RefCntblBaseVirtualDtor
#   clang-analyzer-webkit.UncountedLambdaCapturesChecker
#   concurrency-mt-unsafe
#   concurrency-thread-canceltype-asynchronous
#   cppcoreguidelines-avoid-c-arrays
#   cppcoreguidelines-avoid-capturing-lambda-coroutines
#   cppcoreguidelines-avoid-const-or-ref-data-members
#   cppcoreguidelines-avoid-do-while
#   cppcoreguidelines-avoid-goto
#   cppcoreguidelines-avoid-magic-numbers
#   cppcoreguidelines-avoid-non-const-global-variables
#   cppcoreguidelines-avoid-reference-coroutine-parameters
#   cppcoreguidelines-c-copy-assignment-signature
#   cppcoreguidelines-explicit-virtual-functions
#   cppcoreguidelines-init-variables
#   cppcoreguidelines-interfaces-global-init
#   cppcoreguidelines-macro-usage
#   cppcoreguidelines-misleading-capture-default-by-value
#   cppcoreguidelines-missing-std-forward
#   cppcoreguidelines-narrowing-conversions
#   cppcoreguidelines-no-malloc
#   cppcoreguidelines-noexcept-destructor
#   cppcoreguidelines-noexcept-move-operations
#   cppcoreguidelines-noexcept-swap
#   cppcoreguidelines-non-private-member-variables-in-classes
#   cppcoreguidelines-owning-memory
#   cppcoreguidelines-prefer-member-initializer
#   cppcoreguidelines-pro-bounds-array-to-pointer-decay
#   cppcoreguidelines-pro-bounds-constant-array-index
#   cppcoreguidelines-pro-bounds-pointer-arithmetic
#   cppcoreguidelines-pro-type-const-cast
#   cppcoreguidelines-pro-type-cstyle-cast
#   cppcoreguidelines-pro-type-member-init
#   cppcoreguidelines-pro-type-reinterpret-cast
#   cppcoreguidelines-pro-type-static-cast-downcast
#   cppcoreguidelines-pro-type-union-access
#   cppcoreguidelines-pro-type-vararg
#   cppcoreguidelines-rvalue-reference-param-not-moved
#   cppcoreguidelines-slicing
#   cppcoreguidelines-special-member-functions
#   cppcoreguidelines-use-default-member-init
#   cppcoreguidelines-virtual-class-destructor
#   darwin-avoid-spinlock
#   darwin-dispatch-once-nonstatic
#   fuchsia-default-arguments-calls
#   fuchsia-default-arguments-declarations
#   fuchsia-header-anon-namespaces
#   fuchsia-multiple-inheritance
#   fuchsia-overloaded-operator
#   fuchsia-statically-constructed-objects
#   fuchsia-trailing-return
#   fuchsia-virtual-inheritance
#   google-build-explicit-make-pair
#   google-build-namespaces
#   google-build-using-namespace
#   google-default-arguments
#   google-explicit-constructor
#   google-global-names-in-headers
#   google-objc-avoid-nsobject-new
#   google-objc-avoid-throwing-exception
#   google-objc-function-naming
#   google-objc-global-variable-declaration
#   google-readability-avoid-underscore-in-googletest-name
#   google-readability-braces-around-statements
#   google-readability-casting
#   google-readability-function-size
#   google-readability-namespace-comments
#   google-readability-todo
#   google-runtime-int
#   google-runtime-operator
#   google-upgrade-googletest-case
#   hicpp-avoid-c-arrays
#   hicpp-avoid-goto
#   hicpp-braces-around-statements
#   hicpp-deprecated-headers
#   hicpp-exception-baseclass
#   hicpp-explicit-conversions
#   hicpp-function-size
#   hicpp-invalid-access-moved
#   hicpp-member-init
#   hicpp-move-const-arg
#   hicpp-multiway-paths-covered
#   hicpp-named-parameter
#   hicpp-new-delete-operators
#   hicpp-no-array-decay
#   hicpp-no-assembler
#   hicpp-no-malloc
#   hicpp-noexcept-move
#   hicpp-signed-bitwise
#   hicpp-special-member-functions
#   hicpp-static-assert
#   hicpp-undelegated-constructor
#   hicpp-uppercase-literal-suffix
#   hicpp-use-auto
#   hicpp-use-emplace
#   hicpp-use-equals-default
#   hicpp-use-equals-delete
#   hicpp-use-noexcept
#   hicpp-use-nullptr
#   hicpp-use-override
#   hicpp-vararg
#   linuxkernel-must-check-errs
#   llvm-else-after-return
#   llvm-header-guard
#   llvm-include-order
#   llvm-namespace-comment
#   llvm-prefer-isa-or-dyn-cast-in-conditionals
#   llvm-prefer-register-over-unsigned
#   llvm-qualified-auto
#   llvm-twine-local
#   llvmlibc-callee-namespace
#   llvmlibc-implementation-in-namespace
#   llvmlibc-inline-function-decl
#   llvmlibc-restrict-system-libc-headers
#   misc-confusable-identifiers
#   misc-const-correctness
#   misc-definitions-in-headers
#   misc-header-include-cycle
#   misc-include-cleaner
#   misc-misleading-bidirectional
#   misc-misleading-identifier
#   misc-misplaced-const
#   misc-new-delete-overloads
#   misc-no-recursion
#   misc-non-copyable-objects
#   misc-non-private-member-variables-in-classes
#   misc-redundant-expression
#   misc-static-assert
#   misc-throw-by-value-catch-by-reference
#   misc-unconventional-assign-operator
#   misc-uniqueptr-reset-release
#   misc-unused-alias-decls
#   misc-unused-parameters
#   misc-unused-using-decls
#   misc-use-anonymous-namespace
#   modernize-avoid-bind
#   modernize-avoid-c-arrays
#   modernize-concat-nested-namespaces
#   modernize-deprecated-headers
#   modernize-deprecated-ios-base-aliases
#   modernize-loop-convert
#   modernize-macro-to-enum
#   modernize-make-shared
#   modernize-make-unique
#   modernize-pass-by-value
#   modernize-raw-string-literal
#   modernize-redundant-void-arg
#   modernize-replace-auto-ptr
#   modernize-replace-disallow-copy-and-assign-macro
#   modernize-replace-random-shuffle
#   modernize-return-braced-init-list
#   modernize-shrink-to-fit
#   modernize-type-traits
#   modernize-unary-static-assert
#   modernize-use-auto
#   modernize-use-bool-literals
#   modernize-use-default-member-init
#   modernize-use-emplace
#   modernize-use-equals-default
#   modernize-use-equals-delete
#   modernize-use-nodiscard
#   modernize-use-noexcept
#   modernize-use-nullptr
#   modernize-use-override
#   modernize-use-std-print
#   modernize-use-trailing-return-type
#   modernize-use-transparent-functors
#   modernize-use-uncaught-exceptions
#   modernize-use-using
#   mpi-buffer-deref
#   mpi-type-mismatch
#   objc-assert-equals
#   objc-avoid-nserror-init
#   objc-dealloc-in-category
#   objc-forbidden-subclassing
#   objc-missing-hash
#   objc-nsdate-formatter
#   objc-nsinvocation-argument-lifetime
#   objc-property-declaration
#   objc-super-self
#   openmp-exception-escape
#   openmp-use-default-none
#   performance-avoid-endl
#   performance-faster-string-find
#   performance-for-range-copy
#   performance-implicit-conversion-in-loop
#   performance-inefficient-algorithm
#   performance-inefficient-string-concatenation
#   performance-inefficient-vector-operation
#   performance-move-const-arg
#   performance-move-constructor-init
#   performance-no-automatic-move
#   performance-no-int-to-ptr
#   performance-noexcept-destructor
#   performance-noexcept-move-constructor
#   performance-noexcept-swap
#   performance-trivially-destructible
#   performance-type-promotion-in-math-fn
#   performance-unnecessary-copy-initialization
#   performance-unnecessary-value-param
#   portability-restrict-system-includes
#   portability-simd-intrinsics
#   portability-std-allocator-const
#   readability-avoid-const-params-in-decls
#   readability-avoid-unconditional-preprocessor-if
#   readability-braces-around-statements
#   readability-const-return-type
#   readability-container-contains
#   readability-container-data-pointer
#   readability-container-size-empty
#   readability-convert-member-functions-to-static
#   readability-delete-null-pointer
#   readability-duplicate-include
#   readability-else-after-return
#   readability-function-cognitive-complexity
#   readability-function-size
#   readability-identifier-length
#   readability-identifier-naming
#   readability-implicit-bool-conversion
#   readability-inconsistent-declaration-parameter-name
#   readability-isolate-declaration
#   readability-magic-numbers
#   readability-make-member-function-const
#   readability-misleading-indentation
#   readability-misplaced-array-index
#   readability-named-parameter
#   readability-non-const-parameter
#   readability-operators-representation
#   readability-qualified-auto
#   readability-redundant-access-specifiers
#   readability-redundant-control-flow
#   readability-redundant-declaration
#   readability-redundant-function-ptr-dereference
#   readability-redundant-member-init
#   readability-redundant-preprocessor
#   readability-redundant-smartptr-get
#   readability-redundant-string-cstr
#   readability-redundant-string-init
#   readability-simplify-boolean-expr
#   readability-simplify-subscript-expr
#   readability-static-accessed-through-instance
#   readability-static-definition-in-anonymous-namespace
#   readability-string-compare
#   readability-suspicious-call-argument
#   readability-uniqueptr-delete-release
#   readability-uppercase-literal-suffix
#   readability-use-anyofallof
#   zircon-temporary-objects
