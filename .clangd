############ Global ############
################################
---
Index:
  Background: Skip
  StandardLibrary: No
InlayHints:
  Enabled: Yes
  TypeNameLimit: 24
  DeducedTypes: Yes
  ParameterNames: Yes
  Designators: Yes
  BlockEnd: No
Hover:
  ShowAKA: No
Diagnostics:
  # Suppress diagnostics for paths containing '/include/c++/' or '/include/c/', which are typically the locations of system headers.
  Suppress:
    - ".*include/c/.*"
    - ".*include/c\\+\\+/.*"
---
If:
  PathMatch:
    - .*\.h
    - .*\.hh
    - .*\.hxx
    - .*\.hpp
CompileFlags:
  Add: [-Wno-unused-function, -Wno-unused-const-variable]
---
# C Configs
If:
  PathMatch:
    - .*\.c
    - .*\.h
  PathExclude:
    - .*/.*\.cc
    - .*/.*\.cxx
    - .*/.*\.cpp
    - .*/.*\.hh
    - .*/.*\.hxx
    - .*/.*\.hpp
CompileFlags:
  Compiler: clang
  Add: [-xc, -std=c17, -Wall, -Wextra, -Werror]
---
# C++ Configs
If:
  PathMatch:
    - .*\.cc
    - .*\.cxx
    - .*\.cpp
    - .*\.h
    - .*\.hh
    - .*\.hxx
    - .*\.hpp
  PathExclude:
    - .*/.*\.c
CompileFlags:
  Compiler: clang++
  Add: [-xc++, -std=c++20, -Wall, -Wextra, -Werror]
---
########### Projects ###########
# If:
#   PathMatch: Project/.*
# CompileFlags:
#   CompilationDatabase: Project
#     // You can optionally customize specific compiler flags for Project here
################################
If:
  PathMatch: Project/.*
CompileFlags:
  Compiler: clang++
  Add: [-xc++, -std=c++20, -Wall, -Wextra]
  CompilationDatabase: Project
    // You can optionally customize specific compiler flags for Project here
######### CompileFlags #########
########## Diagnostic ##########
# -Wall,                       # Enable most warning categories.
# -Wextra,                     # Enable extra warning category.
# -Wpedantic,                  # Enable pedantic warning category.
# -Werror,                     # Treat detected warnings as errors.
# -fdiagnostics-color=always,  #
###### Optimization Level ######
# -O0,                         # No optimization, fastest compilation, most debuggable code.
# -O1,                         # Somewhere between -O0 and -O2.
# -O2,                         # Moderate level of optimization enabling most optimizations.
# -O3,                         # Similar to -O2, with longer and larger optimizations for faster execution.
# -Ofast,                      # Enables all -O3 optimizations and additional aggressive optimizations, may violate standards.
# -Os,                         # Like -O2 with extra optimizations for reduced code size.
# -Oz,                         # Like -Os (and -O2), further reduces code size.
# -Og,                         # Similar to -O1, might disable some optimizations for improved debuggability in future versions.
# -O,                          # Equivalent to -O1.
###### Debug Information #######
# -g,                          # Generate debug information.
# -gline-tables-only,          # Generate only line table debug information for symbolicated backtraces without variable details.
# -gmodules,                   # Generate debug information with external references to types from Clang modules
# or precompiled headers. Faster compile times and smaller object files, not suit
################################
